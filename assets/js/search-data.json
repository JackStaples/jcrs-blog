{
  
    
        "post0": {
            "title": "Exploration of NHL Player Statistics by Birth Month",
            "content": "import pandas as pd import matplotlib.pyplot as plt import seaborn as sb import numpy as np from datetime import datetime from bokeh.plotting import figure, show, output_file from bokeh.io import output_notebook players_df = pd.read_csv(r&quot;C: Users jacks Development Python jcrs-blog _notebooks person.csv&quot;) roster_df = pd.read_csv(r&quot;C: Users jacks Development Python jcrs-blog _notebooks roster.csv&quot;) teams_df = pd.read_csv(r&quot;C: Users jacks Development Python jcrs-blog _notebooks teams.csv&quot;) playerStats_df = pd.read_csv(r&quot;C: Users jacks Development Python jcrs-blog _notebooks playerStats.csv&quot;) nhl_stats_df = playerStats_df[(playerStats_df[&#39;league_id&#39;] == 133) &amp; (playerStats_df[&#39;games&#39;] &gt; 9)] nhl_player_stats_df = pd.merge(left=nhl_stats_df, right=players_df, on=&#39;person_id&#39;) nhl_player_stats_team_df = pd.merge(left=nhl_player_stats_df, right=teams_df, on=&#39;team_id&#39;) nhl_player_stats_team_df[&#39;birth_date&#39;] = pd.to_datetime(nhl_player_stats_team_df[&#39;birth_date&#39;], format=&quot;%Y-%m-%d %H:%M:%S-%f&quot;) nhl_player_stats_team_df[&#39;birth_month_number&#39;] = nhl_player_stats_team_df[&#39;birth_date&#39;].dt.month nhl_player_stats_team_df[&#39;birth_month&#39;] = nhl_player_stats_team_df[&#39;birth_date&#39;].dt.month_name() nhl_player_stats_team_df = nhl_player_stats_team_df.sort_values(by=&#39;birth_month_number&#39;) . . Loading BokehJS ... nhl_month_stats_df = nhl_player_stats_team_df[[ &#39;birth_month&#39;, &#39;assists&#39;, &#39;goals&#39;, &#39;pim&#39;, &#39;shots&#39;, &#39;games&#39;, &#39;hits&#39;, &#39;power_play_goals&#39;, &#39;power_play_assists&#39;, &#39;blocked_shots&#39;, &#39;shifts&#39;, ]] rename_map = {&#39;power_play_goals&#39;: &#39;power play goals&#39;, &#39;power_play_assists&#39;: &#39;power play assists&#39;, &#39;blocked_shots&#39;: &#39;blocked shots&#39;, } nhl_month_stats_df = nhl_month_stats_df.rename(columns=rename_map) nhl_month_stats_df[&#39;points&#39;] = nhl_month_stats_df[&#39;goals&#39;] + nhl_month_stats_df[&#39;assists&#39;] nhl_month_stats_df[&#39;goals per game&#39;] = nhl_month_stats_df[&#39;goals&#39;] / nhl_month_stats_df[&#39;games&#39;] nhl_month_stats_df[&#39;assists per game&#39;] = nhl_month_stats_df[&#39;assists&#39;] / nhl_month_stats_df[&#39;games&#39;] nhl_month_stats_df[&#39;points per game&#39;] = nhl_month_stats_df[&#39;points&#39;] / nhl_month_stats_df[&#39;games&#39;] nhl_month_stats_df[&#39;power play points&#39;] = nhl_month_stats_df[&#39;power play goals&#39;] + nhl_month_stats_df[&#39;power play assists&#39;] nhl_month_stats_df[&#39;shooting percentage&#39;] = nhl_month_stats_df[&#39;goals&#39;] / nhl_month_stats_df[&#39;shots&#39;] * 100 . . from numpy import number from bokeh.models import ColumnDataSource, HBar, Segment, Rect, Select, CustomJS from bokeh.layouts import column output_notebook() x_value = &#39;assists&#39; y_value = &#39;birth_month&#39; categories = nhl_month_stats_df[y_value].unique().tolist() # if lower bound is less than zero, zero it def greaterThanZero(x): return x if (x &gt; 0) else 0 sources = {} x_axis_values = nhl_month_stats_df.select_dtypes([number]).columns for x_axis_value in x_axis_values: df = nhl_month_stats_df[[ y_value, x_axis_value, ]] groups = df.groupby(y_value) q1 = groups.quantile(q=0.25).reindex(categories) q2 = groups.quantile(q=0.5).reindex(categories) q3 = groups.quantile(q=0.75).reindex(categories) iqr = q3 - q1 upper = q3 + 1.5*iqr lower = q1 - 1.5*iqr lower[x_axis_value] = lower[x_axis_value].apply(greaterThanZero) source_dict = { &#39;y&#39;: categories, &#39;lower&#39;: lower[x_axis_value], &#39;q1&#39;: q1[x_axis_value], &#39;q2&#39;: q2[x_axis_value], &#39;q3&#39;: q3[x_axis_value], &#39;upper&#39;: upper[x_axis_value] } source = ColumnDataSource(data=source_dict) sources[x_axis_value] = { &#39;source&#39;: source, } tooltips = &quot;&quot;&quot; &lt;div&gt; &lt;span style=&quot;font-size: 12px; font-weight: bold;&quot;&gt;@y&lt;/span&gt;&amp;nbsp; &lt;/div&gt; &lt;div&gt; &lt;span style=&quot;font-size: 10px;&quot;&gt;Lower bounds: @lower&lt;/span&gt;&lt;br&gt; &lt;span style=&quot;font-size: 10px;&quot;&gt;First quartile: @q1&lt;/span&gt;&lt;br&gt; &lt;span style=&quot;font-size: 10px;&quot;&gt;Mean: @q2&lt;/span&gt;&lt;br&gt; &lt;span style=&quot;font-size: 10px;&quot;&gt;Third quartile: @q3&lt;/span&gt;&lt;br&gt; &lt;span style=&quot;font-size: 10px;&quot;&gt;Upper bounds: @upper&lt;/span&gt; &lt;/div&gt; &quot;&quot;&quot; p = figure(y_range=categories, tooltips=tooltips) source = sources[x_value][&#39;source&#39;] hbar = HBar( y=&#39;y&#39;, height=0.6, left=&#39;q1&#39;, right=&#39;q3&#39;, fill_color=&quot;#E08E79&quot; ) lower_segment = Segment(x0=&#39;lower&#39;, y0=&#39;y&#39;, x1=&#39;q1&#39; ,y1=&#39;y&#39;) upper_segment = Segment(x0=&#39;q3&#39;, y0=&#39;y&#39;, x1=&#39;upper&#39; ,y1=&#39;y&#39;) lower_rect = Rect(x=&#39;lower&#39;, y=&#39;y&#39;, width=0.001, height=0.8) middle_rect = Rect(x=&#39;q2&#39;, y=&#39;y&#39;, width=0.001, height=0.8) upper_rect = Rect(x=&#39;upper&#39;, y=&#39;y&#39;, width=0.001, height=0.8) p.add_glyph(source, hbar) p.add_glyph(source, lower_segment) p.add_glyph(source, upper_segment) p.add_glyph(source, lower_rect) p.add_glyph(source, middle_rect) p.add_glyph(source, upper_rect) x_select = Select(title=&quot;Select Stat&quot;, options=x_axis_values.tolist(), value=x_value) x_select.js_on_change(&quot;value&quot;, CustomJS(args=dict(source=source, sources=sources), code=&quot;&quot;&quot; source.data = sources[this.value][&#39;source&#39;].data source.change.emit(); lower_rect_source.data = sources[this.value][&#39;lower_rect_source&#39;].data lower_rect_source.change.emit(); middle_rect_source.data = sources[this.value][&#39;middle_rect_source&#39;].data middle_rect_source.change.emit(); upper_rect_source.data = sources[this.value][&#39;upper_rect_source&#39;].data upper_rect_source.change.emit(); &quot;&quot;&quot;)) layout = column(p, x_select) output_file(&#39;boxplot.html&#39;) # show the results show(layout) #q1.index.values . . Loading BokehJS ... &lt;!DOCTYPE html&gt; Bokeh Plot . .",
            "url": "https://jackstaples.github.io/jcrs-blog/2021/10/25/nhldatatest.html",
            "relUrl": "/2021/10/25/nhldatatest.html",
            "date": " • Oct 25, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jackstaples.github.io/jcrs-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jackstaples.github.io/jcrs-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}